generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters", "fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role       @default(STUDENT)
  bio           String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  Blog          Blog[]
  feedback      Feedback[]
  Comment       Comment[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Feedback {
  id        String         @id @default(cuid())
  userId    String?
  message   String
  type      FeedbackType   @default(GENERAL)
  status    FeedbackStatus @default(OPEN)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  user User? @relation(fields: [userId], references: [id])
}

enum FeedbackType {
  GENERAL
  BUG
  FEATURE_REQUEST
}

enum FeedbackStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
}

model Blog {
  id         Int       @id @default(autoincrement())
  title      String    @db.VarChar(255)
  slug       String    @unique @db.VarChar(255) // SEO-friendly URL
  content    String // Main content of the blog
  excerpt    String? // Optional short summary
  coverImage String? // Optional URL for the blog cover image
  tags       Tag[]     @relation("blogTags")
  authorId   String
  author     User      @relation(fields: [authorId], references: [id])
  likes      Int       @default(0) // Total number of likes
  comments   Comment[] // Relation to comments
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String // Comment text
  blogId    Int
  blog      Blog     @relation(fields: [blogId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Course {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  Stream      Stream[]  @relation("CourseStream")
  Subject     Subject[]
}

model QuestionPaper {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  uploaderId  String?
  views       Int       @default(0)
  year        String
  link        String
  Subject     Subject[]
  published   Boolean   @default(false)
  uploadedAt  DateTime  @default(now())
}

model Stream {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  Course      Course[]  @relation("CourseStream")
  Subject     Subject[] @relation("SubjectStream")
}

model Subject {
  id            String          @id @default(cuid())
  name          String          @unique
  description   String?
  credits       Int?
  year          String?
  Course        Course[]
  QuestionPaper QuestionPaper[]

  Stream Stream[] @relation("SubjectStream")
}

model Tag {
  id    String @id @default(cuid())
  name  String @unique
  slug  String @unique
  blogs Blog[] @relation("blogTags")
}
